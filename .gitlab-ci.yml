stages:
  - build
  - package
  - bootstrap_qemu
  - configure_qemu
  - test_selinux
  - cleanup

build:
  stage: build
  script:
    - docker build -t arch-selinux-build .

package:
  stage: package
  script: |
    mkdir pkgs
    docker run -v "$(pwd)/pkgs:/packages" --rm arch-selinux-build

  artifacts:
    paths:
      - pkgs/*

bootstrap qemu image:
  stage: bootstrap_qemu
  script: |
    repo-add pkgs/selinux-testing.db.tar.xz pkgs/*.zst
    cp -v /etc/pacman.conf pacman.local
    echo -e "[selinux-testing]\nSigLevel = Never\nServer = file:///$(pwd)/pkgs" >> pacman.local
    qemu-img create -f raw archlinux.raw 8G
    sudo losetup /dev/loop0 -P archlinux.raw
    sudo parted /dev/loop0 mklabel msdos
    sudo parted -a optimal /dev/loop0 mkpart primary 0% 100%
    sudo parted -s /dev/loop0 set 1 boot on
    sudo mkfs.ext4 /dev/loop0p1
    sudo tune2fs -L ROOT /dev/loop0p1
    mkdir qemu
    sudo mount /dev/loop0p1 qemu/
    sudo pacstrap -C pacman.local qemu/ base linux

configure qemu image:
  stage: configure_qemu
  script: |
    arch-chroot qemu
    echo arch-chroot stuff

test selinux functionality:
  stage: test_selinux
  script: |
    echo qemu stuff

unmount qemu machine:
  stage: cleanup
  when: always
  script: |
    sudo umount /dev/loop0

detach loop device:
  stage: cleanup
  when: always
  script: |
    sudo losetup -d /dev/loop0
