stages:
  - build
  - package
  - bootstrap_qemu
  - configure_qemu
  - test_selinux
  - cleanup

build:
  stage: build
  script:
    - docker build -t arch-selinux-build .

package:
  stage: package
  script: |
    mkdir pkgs
    docker run -v "$(pwd)/pkgs:/packages" --rm arch-selinux-build

  artifacts:
    paths:
      - pkgs/*

bootstrap qemu image:
  stage: bootstrap_qemu
  script: |
    mkdir -vp /tmp/pkgs
    cp -v pkgs/* /tmp/pkgs
    repo-add /tmp/pkgs/selinux-testing.db.tar.xz /tmp/pkgs/*.zst
    cp -v /etc/pacman.conf /tmp/pkgs/pacman.local
    echo -e "[selinux-testing]\nSigLevel = Never\nServer = file:///tmp/pkgs" >> /tmp/pkgs/pacman.local
    qemu-img create -f raw archlinux.raw 8G
    sudo losetup /dev/loop0 -P archlinux.raw
    sudo parted /dev/loop0 mklabel msdos
    sudo parted -a optimal /dev/loop0 mkpart primary 0% 100%
    sudo parted -s /dev/loop0 set 1 boot on
    mkfs.ext4 /dev/loop0p1
    tune2fs -L ROOT /dev/loop0p1
    mkdir /tmp/arch
    sudo mount /dev/loop0p1 /tmp/arch
    sudo pacstrap -C /tmp/pkgs/pacman.local /tmp/arch base linux

configure qemu image:
  stage: configure_qemu
  script: |
    echo arch-chroot stuff

test selinux functionality:
  stage: test_selinux
  script: |
    echo qemu stuff

cleanup:
  stage: cleanup
  script: |
    umount /tmp/arch
    losetup -d /dev/loop0
    rm -rf /tmp/pkgs
